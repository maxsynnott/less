import { Controller } from "stimulus"

export default class extends Controller {
	static targets = ["input", "price", "buttonDiv", "form"]

	connect() {
		this.formatter = new Intl.NumberFormat("de", {
			style: "currency",
			currency: "EUR"
		})
	}

	price() {
		return parseFloat(this.data.get('price'), 10)
	}

	updatePrice(price) {
		this.priceTarget.innerText = this.formatter.format(price)
	}

	updateValues() {
		let quantity = parseFloat(this.inputTarget.value, 10)

		if (isNaN(quantity)) {
			quantity = 0
		}

		const price = quantity * this.price()

		this.updatePrice(price)
	}

	quantityChange(event) {
		event.preventDefault()

		this.updateValues()
	}

	editButton(event) {
		event.preventDefault()

		const checkButtonHTML = "<button class='btn btn-outline-success' type='submit' data-action='cart-item#submitForm'><i class='fas fa-check'></i></button>"

		$(this.inputTarget).prop('disabled', false)
		$(this.inputTarget).removeClass('disabled')
		$(this.buttonDivTarget).html(checkButtonHTML)
	}

	submitForm(event) {
		event.preventDefault()

		const penButtonHTML = "<button class='btn btn-outline-primary' type='button' data-action='cart-item#editButton'><i class='fas fa-pen'></i></button>"

		fetch(routes.api_v1_cart_item_path({ id: this.data.get('id') }), {
			method: "PATCH",
			body: new FormData(this.formTarget)
		})
		.then(response => response.json())
		.then((data) => {
			if (data.errors) {
				console.log(data.errors)
			} else {
				$(this.inputTarget).prop('disabled', true)
				$(this.inputTarget).addClass('disabled')
				$(this.inputTarget).val(data.quantity)
				$(this.buttonDivTarget).html(penButtonHTML)

				this.data.set('price', data.unit.price)
				this.updateValues()

				$('#checkout_button_total').text(this.formatter.format(data.cart.total))

				this.flashCheckoutButton()
			}
		})
	}

	flashCheckoutButton() {
		$('#checkout_button_total').addClass('flash')
		$('#checkout_button').addClass('flash')

		setTimeout(() => {
			$('#checkout_button_total').removeClass('flash')
			$('#checkout_button').removeClass('flash')
		}, 500)
	}

	destroyItem(event) {
		event.preventDefault()

		fetch(routes.api_v1_cart_item_path({ id: this.data.get('id') }), {
			method: "DELETE"
		})
		.then(response => response.json())
		.then((data) => {
			if (data.errors) {
				console.log(data.errors)
			} else {
				$('#checkout_button_total').text(this.formatter.format(data.cart.total))
				$("#cart_count").text(data.cart.count)

				this.flashCheckoutButton()

				this.removeSelf()
			}
		})
	}

	removeSelf() {
		$(this.element).addClass('fade')

		setTimeout(() => {
			$(this.element).remove()
		}, 500)
	}
}
