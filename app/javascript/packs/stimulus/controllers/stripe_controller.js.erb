import { Controller } from "stimulus"

export default class extends Controller {
	static targets = ["saveCheckbox"]

	connect() {
		this.stripe = Stripe('pk_test_Y2HGxcv4B58lA5tEakifsdiC00JK3c15ec');
		const elements = this.stripe.elements();

		const style = {
		  base: {
		    color: '#32325d',
		    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
		    fontSmoothing: 'antialiased',
		    fontSize: '16px',
		    '::placeholder': {
		      color: '#aab7c4'
		    }
		  },
		  invalid: {
		    color: '#fa755a',
		    iconColor: '#fa755a'
		  }
		};

		this.card = elements.create("card", { style: style });
		this.card.mount("#card-element");

		this.card.on('change', this.displayErrors)
	}

	displayErrors(event) {
		const displayError = document.getElementById('card-errors');

	  if (event.error) {
	    displayError.textContent = event.error.message;
	  } else {
	    displayError.textContent = '';
	  }
	}

	confirmCardPayment(event) {
		event.preventDefault()

		const clientSecret = this.data.get('clientSecret')

		let options;

		const paymentMethod = document.querySelector('input[name="payment-method"]:checked').value

		if (paymentMethod == "new-card") {
			options = {
				payment_method: {
					card: this.card,
					billing_details: {
					  name: 'Example name'
					}
				}
			}

			if (this.saveCheckboxTarget.checked) {
				options.setup_future_usage = "on_session"
			}
		} else {
			options = {
				payment_method: paymentMethod
			}
		}

		this.stripe.confirmCardPayment(clientSecret,
			options
		).then(function(result) {
	    if (result.error) {
	      // Show error to your customer (e.g., insufficient funds)
	      console.log(result.error.message);
	    } else {
	      // The payment has been processed!
	      if (result.paymentIntent.status === 'succeeded') {
	        // Show a success message to your customer
	        // There's a risk of the customer closing the window before callback
	        // execution. Set up a webhook or plugin to listen for the
	        // payment_intent.succeeded event that handles any business critical
	        // post-payment actions.
	        window.location.replace(routes.orders_path());
	      }
	    }
	  });
	}

	confirmCardSetup() {
		const clientSecret = this.data.get("clientSecret")

		this.stripe.confirmCardSetup(clientSecret, {
			payment_method: {
        card: this.card,
        billing_details: {
          name: "Placeholder name",
        }
      }
		})
		.then(function(result) {
			if (result.error) {
				console.log(result.error)
			} else {
				$("#modal-window").modal("hide");
			}
		})
	}

	createPaymentMethod() {
		this.stripe.createPaymentMethod({
			type: 'card',
			card: this.card,
			billing_details: {
			  name: 'Example name'
			}
		})
		.then(function(result) {
			if (result.error) {
				console.log(result.error)
			} else {
				const option = this.paymentMethodToOption(result.paymentMethod)

				$("#order_payment_method_id").append(option).trigger('change')
			}
		})
	}

	paymentMethodToOption(paymentMethod) {
	  return new Option(`**** **** **** ${paymentMethod.card.last4}`, paymentMethod.id, false, true)
	}
}
