import { Controller } from "stimulus"

export default class extends Controller {
	static targets = ["form", "submitButton"]

	connect() {
		this.formatter = new Intl.NumberFormat("de", {
			style: "currency",
			currency: "EUR"
		})

		$(this.formTarget).on('input change', () => {
			if (
				!$('#order_delivery_attributes_address').val() ||
				!$('#order_delivery_attributes_phone').val() ||
				!$("[name='order[delivery_attributes][scheduled_at]']:checked")[0] ||
				!$("#order_payment_method_id option[value*='pm']:checked")[0]
			) {
				this.disableSubmitButton()
			} else {
				this.enableSubmitButton()
			}
		})

		this.initStripe()		
	}

	initStripe() {
		this.stripe = Stripe('pk_test_Y2HGxcv4B58lA5tEakifsdiC00JK3c15ec');
		const elements = this.stripe.elements();

		const style = {
		  base: {
		    color: '#32325d',
		    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
		    fontSmoothing: 'antialiased',
		    fontSize: '16px',
		    '::placeholder': {
		      color: '#aab7c4'
		    }
		  },
		  invalid: {
		    color: '#fa755a',
		    iconColor: '#fa755a'
		  }
		};

		this.card = elements.create("card", { style: style });
		this.card.mount("#card-element");

		this.card.on('change', this.displayErrors)
	}

	displayErrors(event) {
		const displayError = document.getElementById('card-errors');

	  if (event.error) {
	    displayError.textContent = event.error.message;
	  } else {
	    displayError.textContent = '';
	  }
	}

	updateBreakdown(event) {
		fetch(
			routes.breakdown_api_v1_orders_path(),
			{
				method: "POST",
				body: new FormData(this.formTarget)
			}
		)
		.then(response => response.json())
		.then((data) => {
			$("#breakdown_subtotal").text(this.formatter.format(data.breakdown.subtotal))
			$("#breakdown_delivery").text(this.formatter.format(data.breakdown.delivery))
			$("#breakdown_total").text(this.formatter.format(data.breakdown.total))
		})
	}

	enableSubmitButton() {
		const button = this.submitButtonTarget

		button.style.cursor = "pointer"
		button.disabled = false
		button.classList.remove("btn-secondary")
		button.classList.add("btn-success")
	}

	disableSubmitButton() {
		const button = this.submitButtonTarget

		button.style.cursor = "not-allowed"
		button.disabled = true
		button.classList.remove("btn-success")
		button.classList.add("btn-secondary")
	}

	showNewPaymentMethod() {
		$("#new_payment_method").removeClass('d-none')
		$("#show-payment-method-icon").addClass('d-none')
		$("#hide-payment-method-icon").removeClass('d-none')

		$("select#order_payment_method_id").prop('disabled', true)
		$("#toggle_new_payment_method").attr('data-action', 'checkout#hideNewPaymentMethod')

		$("select#order_payment_method_id").val("").trigger('change')
	}

	hideNewPaymentMethod() {
		$("#existing_payment_methods").removeClass('d-none')
		
		$("#new_payment_method").addClass('d-none')
		$("#show-payment-method-icon").removeClass('d-none')
		$("#hide-payment-method-icon").addClass('d-none')

		$("select#order_payment_method_id").prop('disabled', false)
		$("#toggle_new_payment_method").attr('data-action', 'checkout#showNewPaymentMethod')
	}

	createPaymentMethod() {
		this.stripe.createPaymentMethod({
			type: 'card',
			card: this.card,
			billing_details: {
			  name: 'Example name'
			}
		})
		.then((result) => {
			if (result.error) {
				console.log(result.error)
			} else {
				const option = this.paymentMethodToOption(result.paymentMethod)

				this.hideNewPaymentMethod()

				$("#order_payment_method_id").append(option).trigger('change')
			}
		})
	}

	paymentMethodToOption(paymentMethod) {
	  return new Option(`**** **** **** ${paymentMethod.card.last4}`, paymentMethod.id, false, true)
	}
}
