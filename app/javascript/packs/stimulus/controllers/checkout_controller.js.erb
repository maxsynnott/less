import { Controller } from "stimulus"

export default class extends Controller {
	static targets = ["form", "payButton"]

	connect() {
		this.stripe = Stripe('pk_test_Y2HGxcv4B58lA5tEakifsdiC00JK3c15ec');
		const elements = this.stripe.elements();

		this.card = elements.create("card");
		this.card.mount("#card-element");

		this.card.on('change', this.displayStripeErrors)

		this.card.on('focus', (event) => {
			$("#order_payment_method_id_new-card").prop("checked", true).trigger("click")
		})
	}

	async checkValidity() {
		const response = await fetch(
			routes.check_validity_api_v1_orders_path(),
			{
				method: "POST",
				body: new FormData(this.formTarget)
			}
		)

		const data = await response.json()

		if (Object.keys(data.errors).length == 0) {
			this.enablePayButton()
		} else {
			this.disablePayButton()
		}

		this.updateBreakdown(data.breakdown)

		return data
	}

	async fetchSetupIntent() {
		const response = await fetch(
			routes.api_v1_stripe_setup_intents_path(),
			{
				method: "POST"
			}
		)

		const data = await response.json()

		return data
	}

	displayErrorObjects(errorObjects) {
		this.clearFormErrors()

		errorObjects.forEach((errorObject) => {
			errorObject.input.addClass('is-invalid')
			errorObject.errorsDisplay.text(errorObject.errors)
		})
	}

	updateBreakdown(breakdown) {
		console.log(breakdown)
		$("#breakdown_subtotal").text(breakdown.subtotal)
		$("#breakdown_delivery").text(breakdown.delivery)
		$("#breakdown_total").text(breakdown.total)
	}

	confirmCardSetup() {
		const data = this.fetchSetupIntent()

		data
			.then((data) => {
				const clientSecret = data.client_secret

				this.stripe.confirmCardSetup(clientSecret, {
					payment_method: {
		        card: this.card,
		        billing_details: {
		          name: "Placeholder name",
		        }
		      }
				})
				.then(function(result) {
					if (result.error) {
						console.log(result.error)
					} else {
						$("#order_payment_method_id_new-card").val(result.setupIntent.payment_method)
						$("label[for='order_payment_method_id_new-card']").text("Added card")
						$("#stripe-new-card-div").remove()
					}
				})
			})
	}

	displayStripeErrors(event) {
		const displayStripeError = document.getElementById('card-errors');

	  if (event.error) {
	    displayStripeError.textContent = event.error.message;
	  } else {
	    displayStripeError.textContent = '';
	  }
	}

	async createOrder() {
		const response = await fetch(
			routes.api_v1_orders_path(),
			{ 
				method: "POST",
				body: new FormData(this.formTarget)
			}
		)

		const data = await response.json()

		return data
	}

	clearFormErrors() {
		$("input").removeClass("is-invalid")
		$(".error-div").text("")
	}

	enablePayButton() {
		const button = this.payButtonTarget

		button.style.cursor = "pointer"
		button.disabled = false
		button.classList.remove("btn-secondary")
		button.classList.add("btn-success")
	}

	disablePayButton() {
		const button = this.payButtonTarget

		button.style.cursor = "not-allowed"
		button.disabled = true
		button.classList.remove("btn-success")
		button.classList.add("btn-secondary")
	}

	async payOrder() {
		const data = this.createOrder()

		data
			.then((data) => {
				if (data.errors) {
					this.displayFormErrors(data.errors)
				} else {
					fetch(
						routes.pay_api_v1_orders_path({ id: data.id }),
						{
							method: "POST"
						}
					)
					.then(response => response.json())
					.then((data) => {
						if (data.status == "succeeded") {
							console.log("SUCCESS!")

							document.location.href = routes.orders_path()
						} else {
							console.log("Something went wrong")
						}
					})
				}
			})
	}

	errorsToObjects(errors) {
		const errorObjects = []

		Object.keys(errors).forEach((key) => {
			const errorObject = {}

			const prefix = key.replace(/\./, '__')

			errorObject.input = $(`#${prefix}-input`)
			errorObject.errorsDisplay = $(`#${prefix}-errors`)
			errorObject.errors = errors[key]

			errorObjects.push(errorObject)
		})

		return errorObjects
	}

	clearSelf(event) {
		$(event.target).removeClass('is-invalid')
		$(`#${event.target.id.slice(0, -6)}-errors`).text('')
	}

	checkSelf(event) {
		const data = this.checkValidity()

		data
			.then((data) => {
				const errorObjects = this.errorsToObjects(data.errors)
				
				this.displayErrorObjects(errorObjects.filter(object => object.input[0] === event.target))
			})
	}
}
