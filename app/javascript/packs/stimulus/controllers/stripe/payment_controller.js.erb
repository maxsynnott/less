import { Controller } from "stimulus"

export default class extends Controller {
	connect() {
		this.stripe = Stripe('pk_test_Y2HGxcv4B58lA5tEakifsdiC00JK3c15ec');
		const elements = this.stripe.elements();

		const style = {
		  base: {
		    color: '#32325d',
		    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
		    fontSmoothing: 'antialiased',
		    fontSize: '16px',
		    '::placeholder': {
		      color: '#aab7c4'
		    },
		    minWidth: '300px'
		  },
		  invalid: {
		    color: '#fa755a',
		    iconColor: '#fa755a'
		  }
		};

		this.card = elements.create("card", { style: style });
		this.card.mount("#card-element");

		this.card.on('change', this.displayErrors)
	}

	submitPayment(event) {
		event.preventDefault()

		const clientSecret = this.data.get('clientSecret')

		this.stripe.confirmCardPayment(clientSecret, {
	    payment_method: {
	      card: this.card,
	      billing_details: {
	        name: 'Example name'
	      }
	    }
	  }).then(function(result) {
	    if (result.error) {
	      // Show error to your customer (e.g., insufficient funds)
	      console.log(result.error.message);
	    } else {
	      // The payment has been processed!
	      if (result.paymentIntent.status === 'succeeded') {
	        // Show a success message to your customer
	        // There's a risk of the customer closing the window before callback
	        // execution. Set up a webhook or plugin to listen for the
	        // payment_intent.succeeded event that handles any business critical
	        // post-payment actions.
	        console.log("SUCCESS")
	      }
	    }
	  });
	}

	displayErrors(event) {
		const displayError = document.getElementById('card-errors');

	  if (event.error) {
	    displayError.textContent = event.error.message;
	  } else {
	    displayError.textContent = '';
	  }
	}
}
