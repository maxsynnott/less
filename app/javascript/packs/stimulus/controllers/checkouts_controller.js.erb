import { Controller } from "stimulus"

export default class extends Controller {
	// This whole controller although handling some complex logic is currently overcomplicated and could use some refactoring

	static targets = ["form", "payButton", "subtotal", "total", "delivery", "step0", "step1", "step2", "step3", "step4"]

	connect() {
		this.finalStep = 4

		this.stripe = Stripe('pk_test_Y2HGxcv4B58lA5tEakifsdiC00JK3c15ec');
		const elements = this.stripe.elements();

		this.card = elements.create("card");
		this.card.mount("#card-element");

		this.card.on('change', this.displayStripeErrors)

		this.card.on('focus', (event) => {
			$("#order_payment_method_id_new-card").prop("checked", true).trigger("click")
		})
	}

	async checkValidity() {
		this.clearFormErrors()

		const response = await fetch(
			routes.check_validity_api_v1_orders_path(),
			{
				method: "POST",
				body: new FormData(this.formTarget)
			}
		)

		const data = await response.json()

		this.updateBreakdown(data.breakdown) 

		return data
	}

	async fetchSetupIntent() {
		const response = await fetch(
			routes.api_v1_stripe_setup_intents_path(),
			{
				method: "POST"
			}
		)

		const data = await response.json()

		return data
	}

	displayFormErrors(errors, single_attribute=undefined) {
		Object.keys(errors).forEach((key) => {
			const attribute = key.split('.').slice(-1)[0]

			if (single_attribute) {
				if (single_attribute == attribute) {
					$(`#${attribute}_errors`).text(errors[key])
				}
			} else {
				$(`#${attribute}_errors`).text(errors[key])
			}
		})

		if (!single_attribute) {
			// This opens the first card with an error
			// I am ashamed by this line of code but it's the end of the day and it works... DELETE ASAP
			$(Array.from(document.querySelectorAll("div[id*='_errors']")).find(el => el.innerText).parentElement.parentElement.parentElement.previousSibling).collapse("show")
		}
	}

	updateBreakdown(breakdown) {
		this.subtotalTarget.innerText = breakdown.subtotal
		this.deliveryTarget.innerText = breakdown.delivery
		this.totalTarget.innerText = breakdown.total
	}

	confirmCardSetup() {
		const data = this.fetchSetupIntent()

		data
			.then((data) => {
				const clientSecret = data.client_secret

				this.stripe.confirmCardSetup(clientSecret, {
					payment_method: {
		        card: this.card,
		        billing_details: {
		          name: "Placeholder name",
		        }
		      }
				})
				.then(function(result) {
					if (result.error) {
						console.log(result.error)
					} else {
						$("#order_payment_method_id_new-card").val(result.setupIntent.payment_method)
						$("label[for='order_payment_method_id_new-card']").text("Added card")
						$("#stripe-new-card-div").remove()
					}
				})
			})
	}

	displayStripeErrors(event) {
		const displayStripeError = document.getElementById('card-errors');

	  if (event.error) {
	    displayStripeError.textContent = event.error.message;
	  } else {
	    displayStripeError.textContent = '';
	  }
	}

	async createOrder() {
		const response = await fetch(
			routes.api_v1_orders_path(),
			{ 
				method: "POST",
				body: new FormData(this.formTarget)
			}
		)

		const data = await response.json()

		return data
	}

	clearFormErrors() {
		$("div[id*='_errors']").text("")
	}

	triggerStep(event) {
		event.preventDefault()

		const data = this.checkValidity()

		data
			.then((data) => {
				const stepNumber = Number.parseInt(event.target.dataset.step, 10)
				const attribute = this[`step${stepNumber}Target`].querySelector('input, textarea, select').name.match(/\[(\w+)\]$/)[1]

				if (Object.keys(data.errors).some(key => key.endsWith(attribute))) {
					this.displayFormErrors(data.errors, attribute)
				} else {
					if (stepNumber >= this.finalStep) {
						this.finalStep = 0

						if (data.valid) {
							this.enablePayButton()
						} else {
							this.displayFormErrors(data.errors)
						}
					} else {
						this.enableCollapseButton(stepNumber + 1)
					}
				}
			})
	}

	enableCollapseButton(stepNumber) {
		$(`#collapse${stepNumber}`).collapse("show")

		const button = document.querySelector(`button[data-target="#collapse${stepNumber}"`)

		button.setAttribute("data-toggle", "collapse")
		button.classList.add("dropdown-toggle")
	}

	enablePayButton() {
		const button = this.payButtonTarget

		button.style.cursor = "pointer"
		button.disabled = false
		button.classList.remove("btn-secondary")
		button.classList.add("btn-primary")
	}

	async payOrder() {
		const data = this.createOrder()

		data
			.then((data) => {
				if (data.errors) {
					this.displayFormErrors(data.errors)
				} else {
					fetch(
						routes.pay_api_v1_orders_path({ id: data.id }),
						{
							method: "POST"
						}
					)
					.then(response => response.json())
					.then((data) => {
						if (data.status == "succeeded") {
							console.log("SUCCESS!")

							document.location.href = routes.orders_path()
						} else {
							console.log("Something went wrong")
						}
					})
				}
			})
	}
}
