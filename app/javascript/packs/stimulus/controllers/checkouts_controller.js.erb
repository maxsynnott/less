import { Controller } from "stimulus"

export default class extends Controller {
	static targets = ["form", "payButton"]

	connect() {
		this.finalStep = 4

		this.stripe = Stripe('pk_test_Y2HGxcv4B58lA5tEakifsdiC00JK3c15ec');
		const elements = this.stripe.elements();

		this.card = elements.create("card");
		this.card.mount("#card-element");

		this.card.on('change', this.displayErrors)

		this.card.on('focus', (event) => {
			$("#order_payment_method_id_new-card").prop("checked", true).trigger("click")
		})
	}

	async checkValidity() {
		const response = await fetch(
			routes.check_validity_api_v1_orders_path(),
			{
				method: "POST",
				body: new FormData(this.formTarget)
			}
		)

		const data = await response.json()

		return data
	}

	async fetchSetupIntent() {
		const response = await fetch(
			routes.api_v1_stripe_setup_intents_path(),
			{
				method: "POST"
			}
		)

		const data = await response.json()

		return data
	}

	confirmCardSetup() {
		const data = this.fetchSetupIntent()

		data
			.then((data) => {
				const clientSecret = data.client_secret

				this.stripe.confirmCardSetup(clientSecret, {
					payment_method: {
		        card: this.card,
		        billing_details: {
		          name: "Placeholder name",
		        }
		      }
				})
				.then(function(result) {
					if (result.error) {
						console.log(result.error)
					} else {
						$("#order_payment_method_id_new-card").val(result.setupIntent.payment_method)
						$("label[for='order_payment_method_id_new-card']").text("Added card")
						$("#stripe-new-card-div").remove()
					}
				})
			})
	}

	displayErrors(event) {
		const displayError = document.getElementById('card-errors');

	  if (event.error) {
	    displayError.textContent = event.error.message;
	  } else {
	    displayError.textContent = '';
	  }
	}

	async createOrder() {
		const response = await fetch(
			routes.api_v1_orders_path(),
			{ 
				method: "POST",
				body: new FormData(this.formTarget)
			}
		)

		const data = await response.json()

		return data
	}

	triggerStep(event) {
		event.preventDefault()

		const data = this.checkValidity()

		data
			.then((data) => {
				const dataset = event.target.dataset

				if (data.errors[dataset.field]) {
					// Display errors
				} else {
					const stepNumber = Number.parseInt(dataset.step, 10)

					if (stepNumber >= this.finalStep) {
						this.finalStep = 0

						if (data.valid) {
							this.enablePayButton()
						}
					} else {
						this.enableStep(stepNumber + 1)
					}
				}
			})
	}

	enableStep(stepNumber) {
		$(`#step${stepNumber}`).collapse("show")

		document.querySelector(`button[data-target="#step${stepNumber}"`).setAttribute("data-toggle", "collapse")
	}

	enablePayButton() {
		const button = this.payButtonTarget

		button.style.cursor = "pointer"
		button.disabled = false
		button.classList.remove("btn-secondary")
		button.classList.add("btn-primary")
	}

	async payOrder() {
		const data = this.createOrder()

		data
			.then((data) => {
				fetch(
					routes.pay_api_v1_orders_path({ id: data.id }),
					{
						method: "POST"
					}
				)
				.then(response => response.json())
				.then((data) => {
					console.log(data)

					if (data.status == "succeeded") {
						console.log("SUCCESS!")

						document.location.href = routes.orders_path()
					} else {
						console.log("Something went wrong")
					}
				})

			})
	}
}
